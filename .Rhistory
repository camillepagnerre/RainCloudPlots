knitr::opts_chunk$set(fig.width=6, fig.height=3, fig.path='figs/',
echo=FALSE, warning=FALSE, message=FALSE)
packages <- c("ggplot2", "dplyr", "lavaan", "plyr", "cowplot", "rmarkdown",
"readr", "caTools", "bitops")
if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(packages, rownames(installed.packages())))
}
library(cowplot)
library(dplyr)
library(readr)
library(forcats)
source("R_rainclouds.R")
source("summarySE.R")
source("simulateData.R")
# width and height variables for saved plots
w = 6
h = 3
# Make the figure folder if it doesn't exist yet
dir.create('../figs/tutorial_R/', showWarnings = FALSE)
head(summary_simdat)
#Barplot
p1 <- ggplot(summary_simdat, aes(x = group, y = score_mean, fill = group))+
geom_bar(stat = "identity", width = .8)+
geom_errorbar(aes(ymin = score_mean - sem, ymax = score_mean + sem), width = .2)+
guides(fill=FALSE)+
ylim(0, 80)+
ylab('Score')+xlab('Group')+theme_cowplot()+
ggtitle("Figure 1: Barplot +/- SEM")
ggsave('../figs/tutorial_R/1Barplot.png', width = w, height = h)
p1
#Basic plot
p2 <- ggplot(simdat,aes(x=group,y=score))+
geom_flat_violin(position = position_nudge(x = .2, y = 0),adjust =2)+
geom_point(position = position_jitter(width = .15), size = .25)+
ylab('Score')+xlab('Group')+theme_cowplot()+
ggtitle('Figure 2: Basic Rainclouds or Little Prince Plot')
ggsave('../figs/tutorial_R/2basic.png', width = w, height = h)
p2
#Plot with colours and coordinate flip
p3 <- ggplot(simdat,aes(x=group,y=score, fill = group))+
geom_flat_violin(position = position_nudge(x = .2, y = 0),adjust = 2)+
geom_point(position = position_jitter(width = .15), size = .25)+
ylab('Score')+xlab('Group')+coord_flip()+theme_cowplot()+guides(fill = FALSE)+
ggtitle('Figure 3: The Basic Raincloud with Colour')
ggsave('../figs/tutorial_R/3pretty.png', width = w, height = h)
p3
#Raincloud with reduced smoothing
p4 <- ggplot(simdat,aes(x=group,y=score, fill = group))+
geom_flat_violin(position = position_nudge(x = .2, y = 0),adjust = .2)+
geom_point(position = position_jitter(width = .15), size = .25)+
ylab('Score')+xlab('Group')+coord_flip()+theme_cowplot()+guides(fill = FALSE) +
ggtitle('Figure 4: Unsmooth Rainclouds')
ggsave('../figs/tutorial_R/4unsmooth.png', width = w, height = h)
p4
#Rainclouds with boxplots
p5 <- ggplot(simdat,aes(x=group,y=score, fill = group))+
geom_flat_violin(position = position_nudge(x = .25, y = 0),adjust =2)+
geom_point(position = position_jitter(width = .15), size = .25)+
#note that here we need to set the x-variable to a numeric variable and bump it to get the boxplots to line up with the rainclouds.
geom_boxplot(aes(x = as.numeric(group)+0.25, y = score),outlier.shape = NA, alpha = 0.3, width = .1, colour = "BLACK") +
ylab('Score')+xlab('Group')+coord_flip()+theme_cowplot()+guides(fill = FALSE, colour = FALSE) +
ggtitle("Figure 5: Raincloud Plot w/Boxplots")
ggsave('../figs/tutorial_R/5boxplots.png', width = w, height = h)
p5
#Rainclouds with boxplots
p6 <- ggplot(simdat,aes(x=group,y=score, fill = group, colour = group))+
geom_flat_violin(position = position_nudge(x = .25, y = 0),adjust =2, trim = FALSE)+
geom_point(position = position_jitter(width = .15), size = .25)+
geom_boxplot(aes(x = as.numeric(group)+0.25, y = score),outlier.shape = NA, alpha = 0.3, width = .1, colour = "BLACK") +
ylab('Score')+xlab('Group')+coord_flip()+theme_cowplot()+guides(fill = FALSE, colour = FALSE) +
scale_colour_brewer(palette = "Dark2")+
scale_fill_brewer(palette = "Dark2")+
ggtitle("Figure 6: Change in Colour Palette")
ggsave('../figs/tutorial_R/6boxplots.png', width = w, height = h)
p6
#Rainclouds with mean and confidence interval
p7 <- ggplot(simdat,aes(x=group,y=score, fill = group, colour = group))+
geom_flat_violin(position = position_nudge(x = .25, y = 0),adjust =2)+
geom_point(position = position_jitter(width = .15), size = .25)+
geom_point(data = summary_simdat, aes(x = group, y = score_mean), position = position_nudge(.25), colour = "BLACK")+
geom_errorbar(data = summary_simdat, aes(x = group, y = score_mean, ymin = score_mean-sem_ci, ymax = score_mean+sem_ci), position = position_nudge(.25), colour = "BLACK", width = 0.1, size = 0.8)+
ylab('Score')+xlab('Group')+coord_flip()+theme_cowplot()+guides(fill = FALSE, colour = FALSE) +
scale_colour_brewer(palette = "Dark2")+
scale_fill_brewer(palette = "Dark2")+
ggtitle("Figure 7: Raincloud Plot with Mean Â± 95% CI")
ggsave('../figs/tutorial_R/7meanplot.png', width = w, height = h)
p7
#Rainclouds with striated data
#Round data
simdat_round<-simdat
simdat_round$score<-round(simdat$score,0)
#Striated/grouped when no jitter applied
ap1 <- ggplot(simdat_round,aes(x=group,y=score,fill=group,col=group))+
geom_flat_violin(position = position_nudge(x = .2, y = 0), alpha = .6,adjust =4)+
geom_point(size = 1, alpha = 0.6)+ylab('Score')+
scale_fill_brewer(palette = "Dark2")+
scale_colour_brewer(palette = "Dark2")+
guides(fill = FALSE, col = FALSE)+
ggtitle('Striated')
#Added jitter helps
ap2 <- ggplot(simdat_round,aes(x=group,y=score,fill=group,col=group))+
geom_flat_violin(position = position_nudge(x = .2, y = 0), alpha = .4,adjust =4)+
geom_point(position=position_jitter(width = .15),size = 1, alpha = 0.4)+ylab('Score')+
scale_fill_brewer(palette = "Dark2")+
scale_colour_brewer(palette = "Dark2")+
guides(fill = FALSE, col = FALSE)+
ggtitle('Added jitter')
all_plot <- plot_grid(ap1, ap2, labels="AUTO")
# add title to cowplot
title <- ggdraw() +
draw_label("Figure 8: Jittering Ordinal Data",
fontface = 'bold')
all_plot_final <- plot_grid(title, all_plot, ncol = 1, rel_heights = c(0.1, 1)) # rel_heights values control title margins
ggsave('../figs/tutorial_R/8allplot.png', width = w, height = h)
all_plot_final
#Add additional factor/condition
simdat$gr2<-as.factor(c(rep('high',125),rep('low',125),rep('high',125),rep('low',125)))
p9 <- ggplot(simdat,aes(x=group,y=score, fill = group, colour = group))+
geom_flat_violin(position = position_nudge(x = .25, y = 0),adjust =2, trim = TRUE)+
geom_point(position = position_jitter(width = .15), size = .25)+
geom_boxplot(aes(x = as.numeric(group)+0.25, y = score),outlier.shape = NA, alpha = 0.3, width = .1, colour = "BLACK") +
ylab('Score')+xlab('Group')+coord_flip()+theme_cowplot()+guides(fill = FALSE, colour = FALSE) + facet_wrap(~gr2)+
scale_colour_brewer(palette = "Dark2")+
scale_fill_brewer(palette = "Dark2")+
ggtitle("Figure 9: Complex Raincloud Plots with Facet Wrap")
ggsave('../figs/tutorial_R/9facetplot.png', width = w, height = h)
p9
#load the repeated measures facotiral data
rep_data <- read_csv("repeated_measures_data.csv",
col_types = cols(group = col_factor(levels = c("1",
"2")), time = col_factor(levels = c("1",
"2", "3"))))
sumrepdat <- summarySE(rep_data, measurevar = "score", groupvars=c("group", "time"))
head(sumrepdat)
# Rainclouds for repeated measures, continued
p10 <- ggplot(rep_data, aes(x = time, y = score, fill = group)) +
geom_flat_violin(aes(fill = group),position = position_nudge(x = .1, y = 0), adjust = 1.5, trim = FALSE, alpha = .5, colour = NA)+
geom_point(aes(x = as.numeric(time)-.15, y = score, colour = group),position = position_jitter(width = .05), size = 1, shape = 20)+
geom_boxplot(aes(x = time, y = score, fill = group),outlier.shape = NA, alpha = .5, width = .1, colour = "black")+
scale_colour_brewer(palette = "Dark2")+
scale_fill_brewer(palette = "Dark2")+
ggtitle("Figure 10: Repeated Measures Factorial Rainclouds")
ggsave('../figs/tutorial_R/10repanvplot.png', width = w, height = h)
p10
#Rainclouds for repeated measures, additional plotting options
p11 <- ggplot(rep_data, aes(x = time, y = score, fill = group)) +
geom_flat_violin(aes(fill = group),position = position_nudge(x = .1, y = 0), adjust = 1.5, trim = FALSE, alpha = .5, colour = NA)+
geom_point(aes(x = as.numeric(time)-.15, y = score, colour = group),position = position_jitter(width = .05), size = .25, shape = 20)+
geom_boxplot(aes(x = time, y = score, fill = group),outlier.shape = NA, alpha = .5, width = .1, colour = "black")+
geom_line(data = sumrepdat, aes(x = as.numeric(time)+.1, y = score_mean, group = group, colour = group), linetype = 3)+
geom_point(data = sumrepdat, aes(x = as.numeric(time)+.1, y = score_mean, group = group, colour = group), shape = 18) +
geom_errorbar(data = sumrepdat, aes(x = as.numeric(time)+.1, y = score_mean, group = group, colour = group, ymin = score_mean - sem, ymax = score_mean + sem), width = .05)+
scale_colour_brewer(palette = "Dark2")+
scale_fill_brewer(palette = "Dark2")+
ggtitle("Figure 11: Repeated Measures - Factorial (Extended)")
ggsave('../figs/tutorial_R/11repanvplot2.png', width = w, height = h)
p11
#Rainclouds for repeated measures, additional plotting options
p12 <- ggplot(rep_data, aes(x = group, y = score, fill = time)) +
geom_flat_violin(aes(fill = time),position = position_nudge(x = .1, y = 0), adjust = 1.5, trim = FALSE, alpha = .5, colour = NA)+
geom_point(aes(x = as.numeric(group)-.15, y = score, colour = time),position = position_jitter(width = .05), size = .25, shape = 20)+
geom_boxplot(aes(x = group, y = score, fill = time),outlier.shape = NA, alpha = .5, width = .1, colour = "black")+
geom_line(data = sumrepdat, aes(x = as.numeric(group)+.1, y = score_mean, group = time, colour = time), linetype = 3)+
geom_point(data = sumrepdat, aes(x = as.numeric(group)+.1, y = score_mean, group = time, colour = time), shape = 18) +
geom_errorbar(data = sumrepdat, aes(x = as.numeric(group)+.1, y = score_mean, group = time, colour = time, ymin = score_mean - sem, ymax = score_mean + sem), width = .05)+
scale_colour_brewer(palette = "Dark2")+
scale_fill_brewer(palette = "Dark2")+
ggtitle("Figure 12: Repeated Measures - Factorial (Extended)") +
coord_flip()
ggsave('../figs/tutorial_R/12repanvplot3.png', width = w, height = h)
p12
# clean slate to be sure
rm(list = ls())
# check for pacman package and install if not found
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse, here, dplyr, rstatix, corrplot, RColorBrewer, cowplot, patchwork)
# install.packages("ggpubr")
# # Library
# library(dplyr, warn.conflict = FALSE, quietly = TRUE)
# library(rstatix)
# library(corrplot)
# library(RColorBrewer)
# library(tidyverse)
# library(cowplot)
# library(patchwork)
# load data
interodata <- read_tsv("~/Documents/GitHub/AQ10_intero/DATA/allintero_2.tsv")#read_tsv("~/Documents/CFIN - Internship/DATA/allintero_2.tsv")
AQ10 <- read_tsv("~/Documents/GitHub/AQ10_intero/DATA/AQ-10-Score_participants.tsv")#read_tsv("~/Documents/CFIN - Internship/DATA/AQ-10 - Score participants.tsv")
# match subject IDs from intero to AQ10 data
AQ10_subjects <- as.numeric()
for (sub in 1:nrow(AQ10)) {
AQ10_subjects[sub] <- as.numeric(substring(as.character(AQ10[sub,1]), first=5, last=8))
}
# reorder intero data to match AQ10 data
reorder_idx <- match(AQ10_subjects, interodata$ID)
interodata <- interodata[reorder_idx, ]
# add demographic data for csv (for control analyses)
demographic_data <- read_tsv('~/Documents/GitHub/AQ10_intero/DATA/demographics_basic_ques.tsv')
# match order of demographics with all data
demo_subjects <- as.numeric()
for (sub in 1:nrow(demographic_data) ) {
demo_subjects[sub] <- as.numeric(substring(as.character(demographic_data[sub,1]), first=5, last=8))
}
reorder_idx <- match(AQ10_subjects, demo_subjects)
demographic_data <-demographic_data[reorder_idx, ]
# calculate bmi for everyone (height in cm, weight in kilos)
demographic_data["bmi"] = demographic_data["weight"]*10000/(demographic_data["height"]*demographic_data["height"])
# merge lists
alldata <- cbind(interodata, AQ10, demographic_data[ ,2:6])
# deleted the columns name of AQ10, ID and the first one
alldata <- alldata[ ,c(-1,-2,-59)]
# calculate average displeasure score for RRST
alldata$displeasure_mean <- rowMeans(alldata[,41:50], na.rm=TRUE)
# Add a column with the results of screening
data_with_screening <- alldata %>%
group_by(SCREENING = AQ10_SCORE>=6)
data_with_screening$SCREENING[data_with_screening$SCREENING=="FALSE"]<-"AQ10<6"
data_with_screening$SCREENING[data_with_screening$SCREENING=="TRUE"]<-"AQ10>=6"
# save csv of all data including screening
write.csv(data_with_screening, here("DATA", "Intero_AQ10screen.csv"))
ggplot(HRD_intero_screening, aes(x = SCREENING, y = intero.confidence_mean, fill = SCREENING)) +
geom_flat_violin(aes(fill = group),position = position_nudge(x = .1, y = 0), adjust = 1.5, trim = FALSE, alpha = .5, colour = NA)+
geom_point(aes(x = as.numeric(time)-.15, y = score, colour = group),position = position_jitter(width = .05), size = 1, shape = 20)+
geom_boxplot(aes(x = time, y = score, fill = group),outlier.shape = NA, alpha = .5, width = .1, colour = "black")+
scale_colour_brewer(palette = "Dark2")+
scale_fill_brewer(palette = "Dark2")+
ggtitle("HRD intero confidence")
# clean slate to be sure
rm(list = ls())
# check for pacman package and install if not found
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse, here, dplyr, rstatix, corrplot, RColorBrewer, cowplot, patchwork)
# install.packages("ggpubr")
# # Library
# library(dplyr, warn.conflict = FALSE, quietly = TRUE)
# library(rstatix)
# library(corrplot)
# library(RColorBrewer)
# library(tidyverse)
# library(cowplot)
# library(patchwork)
# load data
interodata <- read_tsv("~/Documents/GitHub/AQ10_intero/DATA/allintero_2.tsv")#read_tsv("~/Documents/CFIN - Internship/DATA/allintero_2.tsv")
AQ10 <- read_tsv("~/Documents/GitHub/AQ10_intero/DATA/AQ-10-Score_participants.tsv")#read_tsv("~/Documents/CFIN - Internship/DATA/AQ-10 - Score participants.tsv")
# match subject IDs from intero to AQ10 data
AQ10_subjects <- as.numeric()
for (sub in 1:nrow(AQ10)) {
AQ10_subjects[sub] <- as.numeric(substring(as.character(AQ10[sub,1]), first=5, last=8))
}
# reorder intero data to match AQ10 data
reorder_idx <- match(AQ10_subjects, interodata$ID)
interodata <- interodata[reorder_idx, ]
# add demographic data for csv (for control analyses)
demographic_data <- read_tsv('~/Documents/GitHub/AQ10_intero/DATA/demographics_basic_ques.tsv')
# match order of demographics with all data
demo_subjects <- as.numeric()
for (sub in 1:nrow(demographic_data) ) {
demo_subjects[sub] <- as.numeric(substring(as.character(demographic_data[sub,1]), first=5, last=8))
}
reorder_idx <- match(AQ10_subjects, demo_subjects)
demographic_data <-demographic_data[reorder_idx, ]
# calculate bmi for everyone (height in cm, weight in kilos)
demographic_data["bmi"] = demographic_data["weight"]*10000/(demographic_data["height"]*demographic_data["height"])
# merge lists
alldata <- cbind(interodata, AQ10, demographic_data[ ,2:6])
# deleted the columns name of AQ10, ID and the first one
alldata <- alldata[ ,c(-1,-2,-59)]
# calculate average displeasure score for RRST
alldata$displeasure_mean <- rowMeans(alldata[,41:50], na.rm=TRUE)
# Add a column with the results of screening
data_with_screening <- alldata %>%
group_by(SCREENING = AQ10_SCORE>=6)
data_with_screening$SCREENING[data_with_screening$SCREENING=="FALSE"]<-"AQ10<6"
data_with_screening$SCREENING[data_with_screening$SCREENING=="TRUE"]<-"AQ10>=6"
# save csv of all data including screening
write.csv(data_with_screening, here("DATA", "Intero_AQ10screen.csv"))
#INTEROCEPTION HRD data
HRD_intero <- dplyr::select(alldata,"intero.decision_rt_median","intero.confidence_mean","intero.confidence_rt_median", "intero.bayesian_threshold","intero.bayesian_slope","intero.dprime","intero.roc_auc", "intero.dprime_bayesian","intero.m_ratio","AQ10_SCORE") %>%
na.omit()
#Correlation Intero HRD data
cor_HRD_intero_p <- psych::corr.test(HRD_intero, method = "pearson", adjust = "fdr")$p
cor_HRD_intero_r <- psych::corr.test(HRD_intero, method = "pearson", adjust = "fdr")$r
corrplot(cor_HRD_intero_r, p.mat =cor_HRD_intero_p, sig.level = 0.05, #order = "hclust", type = "upper
tl.col = "black", tl.srt = 45) #, title='HRD intero & AQ10 Pearson corr - Upper tri pFDR<0.05.'
#EXTEROCEPTION HRD data
HRD_extero <- dplyr::select(alldata, "extero.decision_rt_median", "extero.confidence_mean", "extero.confidence_rt_median", "extero.bayesian_threshold", "extero.bayesian_slope", "extero.dprime", "extero.roc_auc", "extero.dprime_bayesian", "extero.m_ratio","AQ10_SCORE") %>%
na.omit()
#Correlation Extero HRD data
cor_HRD_extero_p <- psych::corr.test(HRD_extero, method = "pearson", adjust = "fdr")$p
cor_HRD_extero_r <- psych::corr.test(HRD_extero, method = "pearson", adjust = "fdr")$r
corrplot(cor_HRD_extero_r, p.mat = cor_HRD_extero_p, sig.level = 0.05, #order = "hclust", type = "upper"
tl.col = "black", tl.srt = 45) #, title='HRD extero & AQ10 Pearson corr - Upper tri pFDR<0.05.'
#RRST data
RRST_data <- dplyr::select(alldata, "psi_thresh","psi_slope", "dPrime","mRatio","aRoc","meanConfidence","displeasure1","displeasure2","displeasure3","displeasure4","displeasure5","displeasure6","displeasure7","displeasure8","displeasure9","displeasure10","AQ10_SCORE") %>%
na.pass()
RRST_data$displeasure_mean <- rowMeans(RRST_data[,7:16], na.rm=TRUE)
RRST_data <- RRST_data[ ,c(-7:-16)]
RRST_data <- na.omit(RRST_data) %>%
relocate(displeasure_mean, .before = AQ10_SCORE)
# Correlation RRST and mean displeasure
cor_RRST_data_p <- psych::corr.test(RRST_data, method = "pearson", adjust = "fdr")$p
cor_RRST_data_r <- psych::corr.test(RRST_data, method = "pearson", adjust = "fdr")$r
corrplot(cor_RRST_data_r, p.mat = cor_RRST_data_p, sig.level = 0.05,  #order = "hclust", type = "upper"
tl.col = "black", tl.srt = 45) #, title='RRST & AQ10 Pearson corr - Upper tri pFDR<0.05.'
# INTERO data with screening (n=424)
HRD_intero_screening <- dplyr::select(data_with_screening,"intero.decision_rt_median","intero.confidence_mean","intero.confidence_rt_median", "intero.bayesian_threshold","intero.bayesian_slope","intero.dprime","intero.roc_auc", "intero.dprime_bayesian","intero.m_ratio","AQ10_SCORE", "SCREENING") %>%
na.omit()
# T-TEST Intero
t.test(HRD_intero_screening$intero.decision_rt_median ~ HRD_intero_screening$SCREENING)
t.test(HRD_intero_screening$intero.confidence_mean ~ HRD_intero_screening$SCREENING)
t.test(HRD_intero_screening$intero.confidence_rt_median ~ HRD_intero_screening$SCREENING)
t.test(HRD_intero_screening$intero.bayesian_threshold ~ HRD_intero_screening$SCREENING)
t.test(HRD_intero_screening$intero.bayesian_slope ~ HRD_intero_screening$SCREENING)
t.test(HRD_intero_screening$intero.dprime ~ HRD_intero_screening$SCREENING)
t.test(HRD_intero_screening$intero.roc_auc ~ HRD_intero_screening$SCREENING)
t.test(HRD_intero_screening$intero.dprime_bayesian ~ HRD_intero_screening$SCREENING)
t.test(HRD_intero_screening$intero.m_ratio ~ HRD_intero_screening$SCREENING)
# BOXPLOT INTERO.confidence_mean # HRD_intero_boxplot <-
ggplot(HRD_intero_screening, aes(x = SCREENING, y = intero.confidence_mean, color= SCREENING)) +
geom_boxplot(notch =TRUE) +
scale_y_continuous(limits = c(0,120)) +
theme_classic()
# EXTERO data with screening (n=473)
HRD_extero_screening <- dplyr::select(data_with_screening, "extero.decision_rt_median", "extero.confidence_mean", "extero.confidence_rt_median", "extero.bayesian_threshold", "extero.bayesian_slope", "extero.dprime", "extero.roc_auc", "extero.dprime_bayesian", "extero.m_ratio","AQ10_SCORE","SCREENING") %>%
na.omit()
# T-TEST EXTERO
t.test(HRD_extero_screening$extero.decision_rt_median ~ HRD_extero_screening$SCREENING)
t.test(HRD_extero_screening$extero.confidence_mean ~ HRD_extero_screening$SCREENING)
t.test(HRD_extero_screening$extero.confidence_rt_median ~ HRD_extero_screening$SCREENING)
t.test(HRD_extero_screening$extero.bayesian_threshold ~ HRD_extero_screening$SCREENING)
t.test(HRD_extero_screening$extero.bayesian_slope ~ HRD_extero_screening$SCREENING)
t.test(HRD_extero_screening$extero.dprime ~ HRD_extero_screening$SCREENING)
t.test(HRD_extero_screening$extero.roc_auc ~ HRD_extero_screening$SCREENING)
t.test(HRD_extero_screening$extero.dprime_bayesian ~ HRD_extero_screening$SCREENING)
t.test(HRD_extero_screening$extero.m_ratio ~ HRD_extero_screening$SCREENING)
# BOXPLOT EXTERO.confidence_mean # HRD_extero_boxplot <-
ggplot(HRD_extero_screening, aes(x = SCREENING, y = extero.confidence_mean, color = SCREENING)) + geom_boxplot(notch =TRUE) + scale_y_continuous(limits = c(0,120)) +
theme_classic()
#RRST data with screening (n=230)
RRST_data <- dplyr::select(data_with_screening, "psi_thresh","psi_slope", "dPrime","mRatio","aRoc","meanConfidence","displeasure1","displeasure2","displeasure3","displeasure4","displeasure5","displeasure6","displeasure7","displeasure8","displeasure9","displeasure10","AQ10_SCORE","SCREENING") %>%
na.pass()
RRST_data$displeasure_mean <- rowMeans(RRST_data[,7:16], na.rm=TRUE)
RRST_data <- RRST_data[ ,c(-7:-16)]
RRST_data <- na.omit(RRST_data)
RRST_data_screening <- RRST_data %>% relocate(SCREENING, .after = displeasure_mean)
#T-TEST RRST
t.test(RRST_data_screening$psi_thresh ~ RRST_data_screening$SCREENING)
t.test(RRST_data_screening$psi_slope ~ RRST_data_screening$SCREENING)
t.test(RRST_data_screening$dPrime ~ RRST_data_screening$SCREENING)
t.test(RRST_data_screening$mRatio ~ RRST_data_screening$SCREENING)
t.test(RRST_data_screening$aRoc ~ RRST_data_screening$SCREENING)
t.test(RRST_data_screening$meanConfidence ~ RRST_data_screening$SCREENING)
t.test(RRST_data_screening$displeasure_mean ~ RRST_data_screening$SCREENING)
# BOXPLOT RRST meanConfidence #RRST_boxplot <-
ggplot(RRST_data_screening, aes(x = SCREENING, y = meanConfidence, color = SCREENING)) + geom_boxplot(notch=TRUE) + scale_y_continuous(limits = c(0,120)) +
theme_classic()
# BOXPLOT INTERO.confidence_mean
HRD_intero_boxplot <- ggplot(HRD_intero_screening, aes(x = SCREENING, y = intero.confidence_mean, color= SCREENING)) + ggtitle('HRD intero conf') +
geom_boxplot(notch =TRUE) +
scale_y_continuous(limits = c(0,120)) +
theme_classic()
# BOXPLOT EXTERO.confidence_mean
HRD_extero_boxplot <- ggplot(HRD_extero_screening, aes(x = SCREENING, y = extero.confidence_mean, color = SCREENING)) + geom_boxplot(notch =TRUE) + scale_y_continuous(limits = c(0,120)) + ggtitle('HRD extero conf') +
theme_classic()
# BOXPLOT RRST meanConfidence
RRST_boxplot <- ggplot(RRST_data_screening, aes(x = SCREENING, y = meanConfidence, color = SCREENING)) + geom_boxplot(notch=TRUE) + scale_y_continuous(limits = c(0,120)) + ggtitle('RRST conf') +
theme_classic()
# 3 Plots with differents n # allplot_ttest_diffn <-
HRD_extero_boxplot + HRD_intero_boxplot + RRST_boxplot + plot_layout(guides = "collect", widths = c(2, 2, 2)) + plot_annotation(
#title = ' Interoception vs Exteroception',
subtitle = 'T-Test Î± = 5%',
)
#DATA CONFIDENCE (n=228 obs)
confidence_data <- dplyr::select(data_with_screening, "intero.confidence_mean",
"extero.confidence_mean","meanConfidence", "AQ10_SCORE","SCREENING") %>%
na.omit()
#T-TEST CONFIDENCE
t.test(confidence_data$intero.confidence_mean ~ confidence_data$SCREENING)
t.test(confidence_data$extero.confidence_mean ~ confidence_data$SCREENING)
t.test(confidence_data$meanConfidence ~ confidence_data$SCREENING)
#PLOT CONFIDENCE
plot_confidence_interoHRD <- ggplot(confidence_data, aes(x = SCREENING, y = intero.confidence_mean, color = SCREENING)) + geom_boxplot(notch=TRUE) + scale_y_continuous(limits = c(0,120)) +
theme_classic() + ggtitle('INTERO HRD')
plot_confidence_exteroHRD <- ggplot(confidence_data, aes(x = SCREENING, y = extero.confidence_mean, color = SCREENING)) + geom_boxplot(notch=TRUE) + scale_y_continuous(limits = c(0,120)) +
theme_classic() + ggtitle('EXTERO HRD')
plot_confidence_RRST <- ggplot(confidence_data, aes(x = SCREENING, y = meanConfidence, color = SCREENING)) + geom_boxplot(notch=TRUE) + scale_y_continuous(limits = c(0,120)) +
theme_classic() + ggtitle('INTERO RRST')
# Plot Intero HRD, extero HRD and RRST (n=228) #allplot_ttest_samen <-
plot_confidence_exteroHRD +  plot_confidence_interoHRD +  plot_confidence_RRST + plot_layout(guides = "collect", widths = c(2, 2, 2)) + plot_annotation(
#title = ' Exteroception HRD VS Interoception HRD VS Interoception RRST',
title = 'T-Test Î± = 5%',
)
# AQ10_SCORE>=6 CONFIDENCE DATA SCREENING
ASDgroup_data_screening <- confidence_data %>%
filter(AQ10_SCORE>=6)
# AQ10_SCORE<6 CONFIDENCE DATA SCREENING
withoutASDgroup_data_screening <- confidence_data %>%
filter(AQ10_SCORE<6)
# Delete the screening column for the two groups
ASDgroup_data <- ASDgroup_data_screening[ ,-5]
withoutASDgroup_data <- withoutASDgroup_data_screening[ ,-5]
# Correlation intragroup
#high level in AQ10 test group
cor_ASDgroup_data_p <- psych::corr.test(ASDgroup_data, method = "pearson", adjust = "fdr")$p
cor_ASDgroup_data_r <- psych::corr.test(ASDgroup_data, method = "pearson", adjust = "fdr")$r
corrplot(cor_ASDgroup_data_r, type = "upper", p.mat = cor_ASDgroup_data_p, sig.level = 0.05,  #order = "hclust",
tl.col = "black", tl.srt = 45, title = "Confidence and AQ10-test Correlation in high level group in AQ10 test", mar=c(0,0,1,0))
#low level in AQ10 test group
cor_withoutASDgroup_data_p <- psych::corr.test(withoutASDgroup_data, method = "pearson", adjust = "fdr")$p
cor_withoutASDgroup_data_r <- psych::corr.test(withoutASDgroup_data, method = "pearson", adjust = "fdr")$r
corrplot(cor_ASDgroup_data_r, type = "upper", p.mat = cor_withoutASDgroup_data_p, sig.level = 0.05,  #order = "hclust",
tl.col = "black", tl.srt = 45, title = "Confidence and AQ10-test Correlation in low level group in AQ10 test", mar=c(0,0,1,0))
# median Confidence data
median(ASDgroup_data$intero.confidence_mean)
median(withoutASDgroup_data$intero.confidence_mean)
median(ASDgroup_data$extero.confidence_mean)
median(withoutASDgroup_data$extero.confidence_mean)
median(ASDgroup_data$meanConfidence)
median(withoutASDgroup_data$meanConfidence)
# geom_flat_violin script
geom_flat_violin <- function(mapping = NULL, data = NULL, stat = "ydensity",
position = "dodge", trim = TRUE, scale = "area",
show.legend = NA, inherit.aes = TRUE, ...) {
layer(
data = data,
mapping = mapping,
stat = stat,
geom = GeomFlatViolin,
position = position,
show.legend = show.legend,
inherit.aes = inherit.aes,
params = list(
trim = trim,
scale = scale,
...
)
)
}
#' @rdname ggplot2-ggproto
#' @format NULL
#' @usage NULL
#' @export
GeomFlatViolin <-
ggproto("GeomFlatViolin", Geom,
setup_data = function(data, params) {
data$width <- data$width %||%
params$width %||% (resolution(data$x, FALSE) * 0.9)
# ymin, ymax, xmin, and xmax define the bounding rectangle for each group
data %>%
group_by(group) %>%
mutate(ymin = min(y),
ymax = max(y),
xmin = x,
xmax = x + width / 2)
},
draw_group = function(data, panel_scales, coord) {
# Find the points for the line to go all the way around
data <- transform(data, xminv = x,
xmaxv = x + violinwidth * (xmax - x))
# Make sure it's sorted properly to draw the outline
newdata <- rbind(plyr::arrange(transform(data, x = xminv), y),
plyr::arrange(transform(data, x = xmaxv), -y))
# Close the polygon: set first and last point the same
# Needed for coord_polar and such
newdata <- rbind(newdata, newdata[1,])
ggplot2:::ggname("geom_flat_violin", GeomPolygon$draw_panel(newdata, panel_scales, coord))
},
draw_key = draw_key_polygon,
default_aes = aes(weight = 1, colour = "grey20", fill = "white", size = 0.5,
alpha = NA, linetype = "solid"),
required_aes = c("x", "y")
)
# Cardiac Raincloud plots
ggplot(HRD_intero_screening, aes(x = SCREENING, y = intero.confidence_mean, fill = SCREENING)) + geom_boxplot(notch=TRUE) + scale_y_continuous(limits = c(0,120)) + geom_flat_violin() +  geom_point(mapping = NULL)  + theme_classic() +  scale_colour_brewer(palette = "Dark2") + scale_fill_brewer(palette = "Dark2") + ggtitle("HRD intero confidence")
ggplot(HRD_intero_screening, aes(x = SCREENING, y = intero.confidence_mean, fill = SCREENING)) +
geom_flat_violin(aes(fill = group),position = position_nudge(x = .1, y = 0), adjust = 1.5, trim = FALSE, alpha = .5, colour = NA)+
geom_point(aes(x = as.numeric(time)-.15, y = score, colour = group),position = position_jitter(width = .05), size = 1, shape = 20)+
geom_boxplot(aes(x = time, y = score, fill = group),outlier.shape = NA, alpha = .5, width = .1, colour = "black")+
scale_colour_brewer(palette = "Dark2")+
scale_fill_brewer(palette = "Dark2")+
ggtitle("HRD intero confidence")
